# üå≥ Funcionalidades del Explorador de Proyectos (Tree Explorer)

Este documento detalla las capacidades esenciales y los criterios UX que debe cumplir el Explorador de Proyectos de TreeApp v4 Pro.  
**Las siguientes funcionalidades deben preservarse y testearse tras cada refactor.**
---
## 1. Visualizaci√≥n jer√°rquica
- [ ] Muestra carpetas y archivos en estructura de √°rbol.
- [ ] Iconos distintos para carpetas y archivos.
- [ ] Expandir/colapsar nodos con clic o doble clic.
## 2. Drag & Drop avanzado
- [ ] Mover nodos (carpetas/archivos) arrastrando.
- [ ] Selecci√≥n m√∫ltiple (Ctrl/Shift + clic).
- [ ] Feedback visual durante el drag (colores, cursor).
- [ ] Validaci√≥n de jerarqu√≠a (no permite loops ni hijos inv√°lidos).
- [ ] Expansi√≥n autom√°tica de nodos al arrastrar sobre ellos.
- [ ] Indicador visual claro de d√≥nde se soltar√° el nodo (destino drop).
## 3. Operaciones contextuales
- [ ] Men√∫ contextual con clic derecho:
    - [ ] Crear nueva carpeta/archivo.
    - [ ] Renombrar nodo (sin tapar el icono).
    - [ ] Eliminar nodo (tambi√©n con tecla Delete).
    - [ ] Cambiar estado (ej: completado, pendiente).
- [ ] Atajos de teclado para todas las acciones comunes.
## 4. Portapapeles avanzado
- [ ] Soporta copiar/cortar varios nodos.
- [ ] Pegado con validaci√≥n de jerarqu√≠a y auto-renombrado en caso de conflicto.
- [ ] Indicaci√≥n visual de elementos ‚Äúcortados‚Äù.
## 5. Edici√≥n en l√≠nea
- [ ] Renombrado directo con doble clic o desde men√∫ contextual.
- [ ] Validaci√≥n en tiempo real del nombre (caracteres v√°lidos, duplicados).
## 6. Actualizaci√≥n en tiempo real
- [ ] Cambios instant√°neos reflejados en:
    - [ ] El √°rbol.
    - [ ] La vista previa.
    - [ ] El markdown de nombre de archivo/carpeta.
- [ ] Sincronizaci√≥n visual autom√°tica tras cualquier operaci√≥n.
## 7. Filtrado y b√∫squeda (opcional)
- [ ] Campo de b√∫squeda para filtrar nodos por nombre o estado.
- [ ] Resalta resultados en el √°rbol.
## 8. Visualizaci√≥n flexible
- [ ] El √°rbol lateral siempre muestra la estructura jer√°rquica est√°ndar.
- [ ] Los modos de vista (cl√°sica, ASCII, solo carpetas) se aplican √∫nicamente en la vista previa/exportaci√≥n, **no en el √°rbol de explorador**.
- [ ] Opciones de zoom o ajuste de fuente/espaciado en la vista previa.
- [ ] Scroll vertical y horizontal optimizado donde corresponda.
## 9. Feedback visual y accesibilidad
- [ ] Resaltado claro de selecci√≥n.
- [ ] Tooltips con informaci√≥n de cada nodo.
- [ ] Accesibilidad por teclado y soporte para lectores de pantalla.
## 10. Sincronizaci√≥n con otras vistas
- [ ] Seleccionar un nodo sincroniza el editor/vista previa.
- [ ] Cambios en el editor se reflejan en el √°rbol, markdown, nombre, etc. y viceversa.
## 11. Deshacer y rehacer
- [ ] Bot√≥n de deshacer (Undo).
- [ ] Bot√≥n de rehacer (Redo).
- [ ] Acceso a Undo/Redo desde men√∫ contextual y barra de herramientas.
**Este checklist debe cumplirse siempre.  
No merges cambios que degraden alguna funcionalidad de esta lista.**


‚úÖ Requisitos Funcionales ‚Äì Gesti√≥n Avanzada de √Årboles
1. üå≥ M√∫ltiples √Årboles Simult√°neos
El explorador debe permitir tener varios √°rboles/proyectos abiertos al mismo tiempo.
Cada √°rbol es una instancia independiente con su propio nodo ra√≠z.
Visualmente, se deben mostrar como bloques separados o secciones en el panel izquierdo.
Cada √°rbol puede ser:
Creado manualmente (Nuevo √°rbol)
Importado desde texto
Resultado de una operaci√≥n de duplicaci√≥n/desacoplamiento

2. üñ±Ô∏è Men√∫ contextual para gesti√≥n de √°rboles
Disponible al hacer clic derecho sobre:
El espacio vac√≠o del explorador
La cabecera de un √°rbol
Un nodo ra√≠z

Opciones sugeridas:
‚ûï Nuevo √°rbol / proyecto
üóÇ Cerrar √°rbol
‚úÇÔ∏è Separar rama como √°rbol nuevo (solo en nodos no ra√≠z)
üîÅ Fusionar con otro √°rbol (si hay m√°s de uno)
üíæ Guardar todos los √°rboles

3. üì• Importaci√≥n desde la ventana de c√≥digo
El contenido se pega o escribe directamente en el editor de texto.
El sistema detecta autom√°ticamente si es:
Un √°rbol ASCII (tree)
Una lista indentada
Una lista de rutas
Acciones disponibles (post pegado):
Agregar como rama al nodo seleccionado
Crear nuevo √°rbol con esta estructura
Previsualizar la estructura antes de insertar

4. üîÄ Drag & Drop entre √°rboles
Se puede:
Mover una rama completa de un √°rbol a otro
Fusionar √°rboles arrastrando un nodo ra√≠z dentro de otro √°rbol
Reordenar visualmente los √°rboles o sus ramas
El sistema debe validar jerarqu√≠as y evitar ciclos

5. üîì Desacoplar rama del √°rbol
Clic derecho sobre un nodo permite:
Separar esta rama
La rama pasa a ser un nuevo √°rbol independiente
El nuevo √°rbol aparece como una nueva secci√≥n en el explorador

6. üß© Operaciones avanzadas
Unir √°rboles: fusiona un √°rbol arrastrado dentro de otro
Deshacer √∫ltima importaci√≥n si fue incorrecta
Reasignar nodo ra√≠z: permitir cambiar la ra√≠z de un √°rbol






# üå≥ Agregar m√∫ltiples objetos al √°rbol desde la ventana de c√≥digo
Este documento define los requerimientos completos para la funcionalidad de agregar ramas/carpetas y archivos al √°rbol de proyectos **desde la ventana de c√≥digo** en TreeApp v4 Pro.
## üéØ Objetivo
Permitir al usuario crear estructuras jer√°rquicas de carpetas y archivos pegando o escribiendo texto estructurado en la ventana de c√≥digo (columna 2), con o sin contenido markdown.  
Esta funci√≥n reemplaza el antiguo "pegar √°rbol" del explorador de proyectos y ofrece un flujo m√°s flexible y productivo.
## üìù Requerimientos funcionales
### 1. Bot√≥n y campo de entrada
- [ ] La ventana de c√≥digo debe tener un bot√≥n visible llamado ‚ÄúAgregar √°rbol‚Äù, ‚ÄúAgregar objetos‚Äù, ‚ÄúNew Branch‚Äù o similar.
- [ ] Al pulsarlo, se muestra un campo de texto multilinea donde el usuario puede pegar o escribir la estructura deseada de carpetas/archivos.
- [ ] El campo debe aceptar tanto listas simples como estructuras jer√°rquicas (tabulaciones, guiones, etc.), y archivos con o sin contenido markdown.
### 2. An√°lisis y detecci√≥n autom√°tica
- [ ] El sistema debe analizar el texto pegado y detectar autom√°ticamente:
    - Jerarqu√≠a de carpetas y archivos.
    - Si un bloque es archivo, carpeta o ambos.
    - Si incluye contenido markdown, este se debe asociar al archivo correspondiente.
- [ ] Debe soportar diferentes estilos de entrada (tabulado, guiones, listas markdown, etc.).
### 3. Previsualizaci√≥n y confirmaci√≥n
- [ ] Antes de agregar, mostrar una previsualizaci√≥n clara de c√≥mo quedar√° la estructura en el √°rbol.
- [ ] Indicar visualmente el destino de la inserci√≥n:
    - Si hay nodo seleccionado en el explorador, se agrega como hijo de ese nodo.
    - Si no hay selecci√≥n, se agrega en la ra√≠z.
- [ ] Si el usuario selecciona la opci√≥n ‚ÄúReemplazar rama‚Äù, mostrar advertencia y preview indicando que se eliminar√° la rama seleccionada y se reemplazar√° por la nueva estructura.
### 4. Manejo de conflictos
- [ ] Validar y manejar nombres duplicados (auto-renombrar o avisar al usuario).
- [ ] Validar jerarqu√≠a para evitar inconsistencias (loops, hijos inv√°lidos, etc.).
- [ ] Si se reemplaza una rama, pedir confirmaci√≥n expl√≠cita.
### 5. Operaci√≥n masiva y at√≥mica
- [ ] Toda la estructura se agrega o reemplaza en una sola operaci√≥n at√≥mica.
- [ ] Si ocurre un error, revertir todo y mostrar mensaje claro al usuario.
### 6. Feedback visual y accesibilidad
- [ ] El usuario debe ver inmediatamente el resultado de la operaci√≥n en el explorador de proyectos y en la vista previa.
- [ ] El sistema debe soportar atajos de teclado (Ctrl+Enter para confirmar, Esc para cancelar).
- [ ] La UI debe ser accesible (navegable por teclado, tooltips, etc.).
### 7. Deshacer y rehacer (Undo/Redo)
- [ ] Toda acci√≥n de agregar o reemplazar objetos desde la ventana de c√≥digo debe poder deshacerse y rehacerse.
- [ ] El usuario puede acceder a undo/redo por:
    - Atajos est√°ndar (Ctrl+Z / Ctrl+Y).
    - Botones en la barra de herramientas y men√∫ contextual.
- [ ] Al deshacer, se revierte toda la operaci√≥n.
- [ ] Al rehacer, se restaura la operaci√≥n completa.
## üõ†Ô∏è Requerimientos t√©cnicos
- [ ] Analizador/parsing robusto para diferentes estilos de entrada (tab, guiones, listas, markdown).
- [ ] Interfaz reactiva para previsualizaci√≥n y confirmaci√≥n.
- [ ] Integraci√≥n con el sistema de comandos/undo-redo global de la app.
- [ ] Manejo eficiente de estructuras grandes (performance).
- [ ] Documentaci√≥n y pruebas de cada funcionalidad.
## üìö Ejemplo de flujo de usuario
1. Usuario selecciona un nodo del √°rbol (opcional).
2. Usuario pega o escribe la estructura de carpetas/archivos en la ventana de c√≥digo.
3. Usuario pulsa ‚ÄúAgregar √°rbol‚Äù.
4. El sistema analiza la estructura, muestra la previsualizaci√≥n y el destino.
5. Usuario confirma (o elige reemplazar rama).
6. El sistema agrega/reemplaza la estructura, actualiza el √°rbol y la vista previa.
7. Usuario puede deshacer/rehacer la acci√≥n en cualquier momento.
## üìù Ejemplo de entrada soportada
```
Proyecto/
    docs/
        introduccion.md
        guia.md
    src/
        main.py
        utils.py
Notas generales.md
O bien con markdown:
notas.md
# T√≠tulo de las notas
Este archivo fue generado autom√°ticamente.
## üõ°Ô∏è Notas finales
- La funci√≥n ‚ÄúPegar √°rbol‚Äù se elimina del men√∫/contexto del explorador de proyectos.
- Todas las inserciones y reemplazos deben poder deshacerse/rehacerse.
- El usuario debe tener siempre control y feedback claro sobre la operaci√≥n.
**Estos requerimientos son obligatorios y deben cumplirse antes de aprobar cualquier implementaci√≥n de la funci√≥n.**
## Agregar estructura al √°rbol mediante "pegar" en la ventana de c√≥digo
- El usuario pega o escribe la estructura deseada (carpetas, archivos, markdown, etc.) directamente en la **ventana de c√≥digo**.
- Al presionar el bot√≥n **Agregar**, la aplicaci√≥n analiza y agrega todos los objetos al √°rbol.
- El sistema detecta autom√°ticamente el tipo de entrada (no es necesario seleccionar "importar" ni el tipo de archivo).
- El flujo es directo, simple y eficiente: **Ventana de c√≥digo + Bot√≥n Agregar**.
# Requerimientos funcionales ‚Äî Columna 2 (Zona de Markdown)
La columna central de TreeApp (zona de markdowns) debe contar con 4 inputs diferenciados, cada uno con sus propias caracter√≠sticas, controles y acciones espec√≠ficas. Esta √°rea debe ser altamente flexible, interactiva y orientada a productividad.
## 1. Input de Nombre (Archivo/Rama)
**Descripci√≥n:**  
Campo de texto para editar el nombre del archivo o rama actualmente seleccionada.
**Caracter√≠sticas:**
- Campo de texto de l√≠nea √∫nica, editable.
- [‚úì] Label/title visible: ‚ÄúNombre de archivo/rama‚Äù.
- [‚úì] Bot√≥n de copiar nombre.
- [‚úì] Bot√≥n de borrar (vac√≠a el campo).
- [‚úì] Acci√≥n ‚ÄúRenombrar‚Äù sincroniza el cambio en el explorador y la vista previa en tiempo real.
- [‚úì] Validaci√≥n de nombre (no vac√≠o, sin caracteres prohibidos).
- [‚úì] Atajo de teclado: [F2] para editar r√°pido.
- [‚úì] Bot√≥n de colapsar/expandir bloque.
- [‚úì] Selecci√≥n de todo el texto al enfocar.
- [‚úì] Soporte para copiar, pegar, cortar, borrar, seleccionar todo (Ctrl+C/V/X/A/Del).
- [‚úì] Tooltip con nombre completo si est√° truncado.
- [‚úì] Feedback visual al copiar, borrar, renombrar.
- [‚úì] Modo s√≥lo lectura cuando corresponde (por permisos).
## 2. Input de Texto Markdown (Editor principal)
√Årea de texto principal para editar el contenido markdown del archivo.
- Editor multil√≠nea con scroll vertical.
- [‚úì] Label/title visible: ‚ÄúContenido Markdown‚Äù.
- [‚úì] Numeraci√≥n de filas (opcional, configurable).
- [‚úì] Syntax highlighting para markdown.
- [‚úì] Bot√≥n de copiar todo el contenido.
- [‚úì] Bot√≥n de borrar (vac√≠a el contenido).
- [‚úì] Bot√≥n ‚ÄúPegar‚Äù para importar texto desde portapapeles.
- [‚úì] Atajos est√°ndar: copiar, cortar, pegar, seleccionar todo, deshacer, rehacer.
- [‚úì] Soporte para drag & drop de texto.
- [‚úì] Ajuste de tama√±o vertical mediante slider o arrastrando el borde inferior.
- [‚úì] Tooltip con preview del contenido.
- [‚úì] Cambio en tiempo real refleja en la vista previa y en el √°rbol si corresponde.
- [‚úì] Opci√≥n para expandir a pantalla completa (modo focus).
- [‚úì] Scroll sincronizado con vista previa (opcional).
- [‚úì] Conteo de caracteres y palabras.
- [‚úì] Ctrl+S o bot√≥n para guardar/cerrar edici√≥n.
- [‚úì] Resaltado de l√≠nea actual.
- [‚úì] Feedback visual al copiar, borrar, guardar.
- [‚úì] Exportar contenido a archivo externo (opcional).
- [‚úì] Opciones de accesibilidad (fuentes grandes, contraste, etc).
## 3. Input de Explicaci√≥n Extendida NOMBRE:Notas T√©cnicas
Campo para una explicaci√≥n adicional, comentarios, o metadatos descriptivos del archivo o carpeta.
- Editor de texto multil√≠nea (m√°s peque√±o que el markdown principal).
- [‚úì] Label/title visible: ‚ÄúDescripci√≥n extendida‚Äù o ‚ÄúNotas‚Äù.
- [‚úì] Bot√≥n de copiar texto.
- [‚úì] Atajos de copiar, pegar, seleccionar, borrar, deshacer, rehacer.
- [‚úì] Puede mostrar preview en tooltip.
- [‚úì] Soporta links y formato simple (bold, italic, opcional).
- [‚úì] Puede ser colapsado por defecto para ahorrar espacio.
- [‚úì] Sincronizaci√≥n instant√°nea con metadatos del sistema.
- [‚úì] Ajuste de tama√±o vertical mediante slider/handle.
- [‚úì] Feedback visual al copiar, borrar.
- [‚úì] Opci√≥n para expandir a pantalla completa (opcional).
## 4. Ventana de C√≥digo (Zona de estructura/c√≥digo libre)
√Årea de c√≥digo para pegar, editar o generar estructuras de √°rbol, scripts, fragmentos de configuraci√≥n, etc.
- Editor multil√≠nea avanzado, tipo ‚Äúcode editor‚Äù.
- [‚úì] Label/title visible: ‚ÄúVentana de c√≥digo‚Äù o ‚ÄúEstructura a agregar‚Äù.
- [‚úì] Numeraci√≥n de filas siempre visible.
- [‚úì] Syntax highlighting b√°sico (markdown, texto plano, √°rbol, opcional).
- [‚úì] Bot√≥n de copiar todo el bloque de c√≥digo.
- [‚úì] Atajos de copiar, pegar, cortar, seleccionar todo, deshacer, rehacer.
- [‚úì] Soporte para ‚Äúpegar estructura‚Äù (entrada principal para agregar al √°rbol).
- [‚úì] Bot√≥n ‚ÄúAgregar‚Äù (acci√≥n principal de esta zona).
- [‚úì] Ajuste de tama√±o vertical por slider/handle.
- [‚úì] Drag & drop de texto compatible.
- [‚úì] Modo pantalla completa.
- [‚úì] Conteo de l√≠neas/caracteres.
- [‚úì] Scroll independiente.
- [‚úì] Validaciones contextuales (estructura v√°lida, feedback visual).
- [‚úì] Scroll horizontal si excede ancho.
- [‚úì] Bot√≥n de ‚Äúlimpiar todo‚Äù.
- [‚úì] Feedback visual al copiar, borrar, agregar.
- [‚úì] Integraci√≥n directa con el √°rbol y la vista previa.
## Controles y Flexibilidad Comunes
- [‚úì] Cada bloque/input tiene su propio t√≠tulo y puede ser colapsado/expandido individualmente con un bot√≥n visible.
- [‚úì] Todos los campos soportan copiar, pegar, cortar, borrar, seleccionar todo, con atajos est√°ndar (Ctrl/Cmd+C/V/X/A/Del).
- [‚úì] Selecci√≥n de texto con doble click y triple click (palabra/fila).
- [‚úì] Bot√≥n de ‚Äúcopiar todo‚Äù para cada bloque.
- [‚úì] Interfaz flexible: cada input se puede redimensionar verticalmente por el usuario (slider o arrastrando borde inferior).
- [‚úì] Feedback visual cuando se copia o borra (mensaje ‚Äúcopiado‚Äù, ‚Äúborrado‚Äù).
- [‚úì] Navegaci√≥n r√°pida por teclado entre bloques (Tab/Shift+Tab).
- [‚úì] Integraci√≥n con sistema de deshacer/rehacer global.
- [‚úì] Configuraci√≥n de visibilidad y orden de inputs desde preferencias de usuario (opcional).
- [‚úì] Tooltips informativos en √≠conos y botones.
- [‚úì] Accesibilidad: soporta lectores de pantalla y navegaci√≥n por teclado.
- [‚úì] Todos los estados (colapsado/expandido, tama√±o) se recuerdan por sesi√≥n/usuario.
## Estado y Sincronizaci√≥n
- Cambios en el campo de nombre actualizan √°rbol y preview en tiempo real.
- Cambios en markdown y descripci√≥n se reflejan instant√°neamente en la vista previa.
- La ventana de c√≥digo es la fuente principal para agregar estructuras al √°rbol (pasting y bot√≥n agregar).
- Deshacer/rehacer v√°lido para todas las acciones de texto.
- Los inputs recuerdan su estado de colapsado/expandido y tama√±o.
- Sincronizaci√≥n visual con explorador y panel de preview.
## Botonera com√∫n por bloque
- [ Copiar ] [ Borrar ] [ Colapsar/Expandir ] [ (Opcional) Exportar ] [ (Opcional) Pantalla completa ]
**Todos estos requerimientos deben cumplirse para la columna 2 de 
# Requerimientos funcionales ‚Äî Vista Previa: Tree
La vista previa denominada **Tree** debe mostrar, en tiempo real y de forma clara, la estructura l√≥gica del proyecto (√°rbol de carpetas y archivos), sus atributos y descripciones asociadas. Debe ser altamente flexible, configurable y exportable en distintos formatos.
## 1. Estructura General
- Visualizaci√≥n jer√°rquica tipo √°rbol (carpetas y archivos con indentaci√≥n).
- **Renderizaci√≥n inmediata desde el inicio**: el √°rbol debe mostrarse apenas se cargue cualquier dato del explorador de archivos, aun cuando el proyecto est√© vac√≠o o reci√©n creado.
- **Agregar y mostrar siempre la primera carpeta ra√≠z** al iniciar el programa, incluso si el usuario abre un proyecto nuevo y la estructura a√∫n est√° vac√≠a.
- Renderizado inmediato ante cualquier cambio:  
  - Carga inicial de archivos y carpetas (explorador, drag & drop, importaci√≥n).
  - Adici√≥n de nuevos archivos/carpeta.
  - Inclusi√≥n instant√°nea de archivos/carpetas/ramas agregados mediante "pegar" o desde markdowns en la zona de c√≥digo.
- Soporte para estructuras anidadas de cualquier profundidad.
- Distinci√≥n visual entre carpetas y archivos (iconos, colores, estilos de l√≠nea o prefijos).
- Atributos/estados adicionales visibles por cada nodo (ej: estado: ‚úÖ‚ùå‚¨ú, prioridad, etiquetas).
- Columna de descripci√≥n/markdown visible junto a cada archivo/carpeta.
- Opcional: numeraci√≥n o contadores de nodos/archivos/carpetas.
## 2. Modos de Visualizaci√≥n
- **Cl√°sico**: √Årbol con indentaci√≥n, iconos de tipo y estados, descripciones a la derecha.
- **ASCII Completo**: √Årbol con caracteres ASCII (‚îú‚îÄ‚îÄ, ‚îî‚îÄ‚îÄ), mostrando carpetas y archivos, alineaciones configurables.
- **ASCII Solo Carpetas**: Solo muestra la jerarqu√≠a de carpetas, con archivos opcionalmente ocultos o listados como resumen.
- **Columnas**: Tabla alineada tipo Excel, con columnas configurables (Ruta, Estado, Markdown), separadores visibles y redimensionables.
## 3. Configuraci√≥n de Columnas (Modo Columnas)
- Columnas redimensionables por drag & drop del separador.
- Ancho m√≠nimo/m√°ximo configurable por columna.
- Orden de columnas configurable (ej: Ruta | Estado | Descripci√≥n).
- Alineaci√≥n por columna (izquierda, centro, derecha).
- Truncado de texto largo configurable (con tooltip para ver el contenido completo).
- Opci√≥n para auto-ajustar ancho al contenido m√°s largo.
- Presets de layout: compacto, est√°ndar, extendido, personalizado.
- Visualizaci√≥n de encabezados y separadores claros.
## 4. Exportaci√≥n
- Exportaci√≥n a TXT con el layout y espaciamiento configurado (manteniendo alineaci√≥n de columnas, separadores, indentaci√≥n y truncado).
- Opci√≥n para incluir/excluir atributos (iconos, estado, markdown).
- Incluye encabezado con nombre del proyecto, fecha, configuraci√≥n aplicada y estad√≠sticas.
- Soporte para exportar solo la rama/nodo actual o toda la estructura.
- Opci√≥n para exportar en los 4 modos de visualizaci√≥n (Cl√°sico, ASCII Completo, ASCII Carpetas, Columnas).
- Exportaci√≥n r√°pida v√≠a bot√≥n visible.
## 5. Controles y Flexibilidad
- Panel de configuraci√≥n para ajustar los anchos, orden, visibilidad de columnas y otros par√°metros.
- Soporte para presets reutilizables de visualizaci√≥n/exportaci√≥n.
- Accesibilidad: alto contraste, navegaci√≥n por teclado, tooltips informativos.
- Scroll vertical/horizontal seg√∫n el contenido.
- Feedback visual instant√°neo al modificar configuraci√≥n o datos.
- Opci√≥n para colapsar/expandir ramas del √°rbol.
- Contador de elementos por carpeta y totales del √°rbol (opcional).
- Vista previa en tiempo real antes de exportar.
## 6. Interacci√≥n y Usabilidad
- Hover sobre nodos muestra tooltip con detalles completos (nombre, descripci√≥n, estado, metadatos).
- Click derecho sobre nodo abre men√∫ contextual (acciones: copiar ruta, copiar markdown, expandir/colapsar, incluir/excluir en exportaci√≥n).
- Selecci√≥n m√∫ltiple de nodos para acciones en lote (opcional).
- Navegaci√≥n por teclado entre nodos.
- Doble click para auto-expandir/colapsar rama.
## 7. Estado y Sincronizaci√≥n
- **Renderizaci√≥n inmediata ante cualquier evento:**  
  - Al cargar el explorador de archivos.
  - Al agregar cualquier archivo o carpeta, ya sea desde la UI, desde la zona de c√≥digo (pasting), o desde markdowns pegados.
  - Cuando se crea un nuevo proyecto o se importa uno existente.
- Refleja en tiempo real todos los cambios realizados en la columna 2.
- Sincronizaci√≥n autom√°tica con el √°rbol principal y la estructura interna de datos.
- Recuerda configuraci√≥n de layout, ancho de columnas y colapsado/expandido de ramas por sesi√≥n.
## 8. Estad√≠sticas y Res√∫menes (Opcional)
- Muestra resumen de cantidad de carpetas, archivos, completados, pendientes, etc.
- Resumen visible en la parte inferior o al exportar.
**Todos estos requerimientos deben cumplirse para la vista previa tipo Tree en TreeApp.**
# Requerimientos funcionales ‚Äî Exportaci√≥n desde Tree (Vista previa)
## 1. Di√°logo ‚ÄúGuardar como‚Ä¶‚Äù
Al pulsar exportar desde la vista Tree, debe abrirse un di√°logo con al menos estas opciones:
- **Guardar como Proyecto (.wjp):**  
  Guarda toda la estructura, metadatos y notas en un formato editable propietario.
- **Exportar como TXT:**  
  Presenta subopciones para personalizar el contenido y formato del TXT exportado:
  ### Opciones de formato:
  - Formato de vista previa:  
    - Cl√°sico  
    - ASCII  
    - Columnas
  ### Opciones de inclusi√≥n:
  - Incluir **Notas T√©cnicas** (campo 3, ahora llamado as√≠).
  - Incluir **C√≥digo** (contenido del campo de c√≥digo).
  - Exportar **solo una rama seleccionada** del √°rbol:  
    - Si est√° seleccionada una rama, exporta √∫nicamente ese sub√°rbol y su contenido.  
    - Si no hay selecci√≥n, mostrar aviso: ‚ÄúSelecciona una rama‚Äù.
## 2. Formato profesional de exportaci√≥n TXT
Cada carpeta o archivo exportado como rama principal o subrama debe ir precedido de un **encabezado profesional**.  
Si existen Notas T√©cnicas asociadas (campo 3), deben incluirse ordenadas y visibles antes del contenido de c√≥digo.
### Estructura del encabezado por rama/archivo:
```txt
// ===========================================================================================
// Nombre archivo/carpeta - Markdown
//
// Notas t√©cnicas (si las hay)...
- El bloque de Notas T√©cnicas se coloca inmediatamente despu√©s del encabezado, antes del c√≥digo o cualquier otro contenido.
- Si se exporta solo una rama, el encabezado hace referencia al nombre de la rama/archivo.
- Si se exportan varias ramas, cada una puede ir precedida de su propio encabezado.
- El contenido de c√≥digo (si se incluye) va despu√©s de las notas t√©cnicas.
## 3. Inclusi√≥n de Notas T√©cnicas
- Al activar la opci√≥n ‚ÄúIncluir Notas T√©cnicas‚Äù, el sistema debe tomar el contenido del campo Notas T√©cnicas (campo 3) de cada nodo y ubicarlo bajo el encabezado correspondiente en el TXT.
- El orden de las notas debe respetar la jerarqu√≠a del √°rbol, es decir, primero las de la rama principal y luego las de cada subrama o archivo, siguiendo la estructura exportada.
- Si un nodo no tiene notas t√©cnicas, se omite ese bloque en el encabezado de ese nodo.
## 4. Inclusi√≥n de C√≥digo
- Al activar la opci√≥n ‚ÄúIncluir C√≥digo‚Äù, el sistema debe agregar el contenido del campo de c√≥digo (campo 4) despu√©s de las Notas T√©cnicas, manteniendo el mismo orden jer√°rquico y de encabezados.
## 5. Orden y claridad
- El TXT debe ser claro, ordenado y legible, con separaci√≥n suficiente entre ramas, notas y c√≥digo.
- Todos los encabezados deben ser f√°cilmente reconocibles y estar alineados.
- Las opciones de exportaci√≥n deben ser accesibles y recordadas por defecto para futuras exportaciones (opcional).
## 6. Ejemplo de resultado TXT
// CarpetaRaiz - Descripci√≥n Markdown
// Notas t√©cnicas de la carpeta ra√≠z...
// (C√≥digo de la carpeta ra√≠z, si aplica)
// ---------------------------------------
// subcarpeta1 - Descripci√≥n Markdown
// Notas t√©cnicas de subcarpeta1...
// (C√≥digo de subcarpeta1)
// archivo.txt - Descripci√≥n Markdown
// Notas t√©cnicas del archivo...
// (C√≥digo del archivo)
**Estos requerimientos aplican a la exportaci√≥n en TXT desde la vista Tree y al nuevo di√°logo "Guardar como..."**
Necesito implementar un sistema completo de vista previa para TreeApp v4 Pro 
(Python/Tkinter) con las siguientes especificaciones exactas:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
CONTEXTO DE LA APLICACI√ìN:
- TreeApp v4 Pro: Organizador visual de proyectos tipo √°rbol de archivos
- Panel derecho dedicado a vista previa de la estructura del proyecto
- Datos disponibles: node_data con rutas, estados (emojis ‚úÖ‚ùå‚¨ú), contenido markdown
REQUERIMIENTO PRINCIPAL:
Sistema de vista previa con 4 modos de visualizaci√≥n diferentes, cada uno 
con elementos configurables y capacidad de exportaci√≥n TXT manteniendo 
el formato exacto configurado en la interfaz.
ESPECIFICACIONES DE LOS 4 MODOS:
1. MODO CL√ÅSICO:
   - Indentaci√≥n jer√°rquica simple (configurable: 1-8 espacios)
   - Iconos opcionales (üìÅüìÑ)
   - Estados centrados con separaci√≥n configurable
   - Markdown truncado (longitud configurable)
2. MODO ASCII COMPLETO:
   - Caracteres ASCII para jerarqu√≠a: ‚îú‚îÄ‚îÄ ‚îî‚îÄ‚îÄ ‚îÇ (configurables)
   - L√≠neas de conexi√≥n continuas
   - Separadores configurables entre elementos
   - Opci√≥n Unicode/ASCII b√°sico
3. MODO ASCII SOLO CARPETAS:
   - Muestra √∫nicamente estructura de carpetas
   - Contador de archivos por carpeta
   - Estad√≠sticas de archivos ocultos al final
   - Resumen por estados
4. MODO COLUMNAS (Estilo Excel):
   - 3 columnas redimensionables: Ruta | Estado | Markdown
   - Arrastrar separadores para ajustar anchos
   - Doble click para auto-ajustar al contenido
   - L√≠mites m√≠n/m√°x configurables por columna
ELEMENTOS CONFIGURABLES UNIVERSALES:
- Mostrar/ocultar iconos (üìÅüìÑ)
- Mostrar/ocultar estados (‚úÖ‚ùå‚¨ú)  
- Mostrar/ocultar descripciones markdown
- Longitud m√°xima de markdown (truncado con "...")
- Profundidad m√°xima de visualizaci√≥n
- Separaci√≥n entre elementos (espacios configurables)
- Colores alternados en filas
- Filtros por tipo (todos/archivos/carpetas/por estado)
- Ordenaci√≥n (nombre/tipo/estado/fecha)
SISTEMA DE EXPORTACI√ìN TXT:
Cada modo debe poder exportar a TXT manteniendo EXACTAMENTE el formato 
y espaciado configurado en la interfaz, incluyendo:
- Encabezado del proyecto con modo utilizado
- Configuraci√≥n aplicada documentada
- Estructura con formato espec√≠fico del modo
- Estad√≠sticas detalladas del proyecto
- Fecha y hora de exportaci√≥n
- Separadores visuales apropiados
INTERFAZ REQUERIDA:
1. SELECTOR DE MODO:
   - Dropdown con los 4 modos
   - Bot√≥n de configuraci√≥n por modo
   - Vista previa en tiempo real de cambios
2. PANEL DE CONFIGURACI√ìN:
   - Configuraci√≥n universal (elementos comunes)
   - Configuraci√≥n espec√≠fica por modo
   - Presets predefinidos (Compacto/Est√°ndar/Detallado)
   - Guardar/cargar configuraciones personalizadas
3. √ÅREA DE VISTA PREVIA:
   - Scroll vertical y horizontal
   - Redimensionado de columnas (modo Columnas)
   - Selecci√≥n y navegaci√≥n
   - Actualizaciones en tiempo real
4. CONTROLES DE EXPORTACI√ìN:
   - Selector de tipo de exportaci√≥n
   - Opciones adicionales (estad√≠sticas, encabezados, etc.)
   - Vista previa del archivo TXT
   - Guardado con nombre personalizable
DATOS DE EJEMPLO:
```python
node_data = {
    "root": {"name": "Root", "type": "folder", "status": "‚úÖ", 
             "markdown_short": "# Proyecto principal"},
    "src": {"name": "src", "type": "folder", "status": "‚¨ú", 
            "markdown_short": "# C√≥digo fuente"},
    "main": {"name": "main.py", "type": "file", "status": "‚úÖ", 
             "markdown_short": "# Punto de entrada principal"}
}
# Requerimientos Funcionales ‚Äî Sistema de Vista Previa TreeApp v4 Pro
## CONTEXTO
- **Aplicaci√≥n:** TreeApp v4 Pro (Python/Tkinter)
- **Prop√≥sito:** Organizador visual de proyectos en √°rbol
- **Ubicaci√≥n:** Panel derecho = √°rea de Vista Previa
- **Datos:** Estructura jer√°rquica (`node_data`), estados (‚úÖ‚ùå‚¨ú), markdown corto
## 1. MODOS DE VISTA PREVIA
### 1.1 Modo Cl√°sico
- Indentaci√≥n jer√°rquica (configurable: 1‚Äì8 espacios)
- Iconos opcionales (üìÅ = carpeta, üìÑ = archivo)
- Estados centrados, separaci√≥n horizontal configurable
- Markdown truncado con longitud m√°xima definida
- Configuraci√≥n para mostrar/ocultar iconos, estados y markdown
### 1.2 Modo ASCII Completo
- Jerarqu√≠a con caracteres ASCII: ‚îú‚îÄ‚îÄ, ‚îî‚îÄ‚îÄ, ‚îÇ (personalizables)
- L√≠neas de conexi√≥n continuas y alineadas
- Separadores configurables entre elementos
- Opci√≥n de elegir Unicode o ASCII puro
- Configuraci√≥n para mostrar/ocultar iconos, estados, markdown
### 1.3 Modo ASCII Solo Carpetas
- Solo muestra estructura de carpetas (archivos ocultos)
- Contador de archivos por carpeta
- Estad√≠sticas de archivos ocultos al final del √°rbol
- Resumen por estados (ej: total archivos, completados, pendientes)
- Configuraci√≥n para profundidad m√°xima y mostrar/ocultar iconos
### 1.4 Modo Columnas (Estilo Excel)
- Tres columnas: Ruta | Estado | Markdown
- Columnas redimensionables por drag & drop
- Doble click para autoajustar ancho al contenido
- L√≠mites m√≠nimo/m√°ximo de ancho por columna
- Separadores verticales claros
- Scroll horizontal/vertical
- Colores alternados en filas (opcional)
- Configuraci√≥n individual de columnas: mostrar/ocultar, orden, ancho, truncado
## 2. ELEMENTOS CONFIGURABLES UNIVERSALES
- Mostrar/ocultar estados (‚úÖ‚ùå‚¨ú)
- Longitud m√°xima de markdown (truncado con "‚Ä¶")
- Filtros por tipo (todos/solo archivos/solo carpetas/por estado)
- Ordenaci√≥n por nombre, tipo, estado, fecha, o personalizada
## 3. SISTEMA DE EXPORTACI√ìN TXT (POR MODO)
- Bot√≥n ‚ÄúExportar como TXT‚Äù disponible en todos los modos
- **El TXT exportado debe coincidir exactamente** (espaciado, alineaci√≥n, iconos, separadores, truncado) con la vista previa
- Incluye siempre:
  - Encabezado con nombre de proyecto, modo utilizado, fecha y hora de exportaci√≥n
  - Documentaci√≥n de configuraci√≥n aplicada (elementos visibles, filtros, orden, etc.)
  - Estructura en el formato exacto del modo seleccionado
  - Estad√≠sticas detalladas (total carpetas, archivos, estados, profundidad m√°xima)
  - Separadores visuales consistentes
- Opci√≥n para incluir/excluir encabezados, estad√≠sticas y markdown extendido
## 4. INTERFAZ DE USUARIO
### 4.1 Selector de Modo
- Dropdown con los 4 modos
- Bot√≥n de configuraci√≥n espec√≠fico para cada modo
- Cambios reflejados en tiempo real en la vista previa
### 4.2 Panel de Configuraci√≥n
- Configuraci√≥n universal y espec√≠fica por modo
- Presets predefinidos: Compacto, Est√°ndar, Detallado
- Guardar y cargar configuraciones personalizadas (por usuario/proyecto)
### 4.3 √Årea de Vista Previa
- Scroll vertical y horizontal seg√∫n contenido
- Redimensionado de columnas (en modo Columnas)
- Selecci√≥n y navegaci√≥n por √°rbol, filas, columnas
- Actualizaciones en tiempo real ante cualquier cambio de datos o configuraci√≥n
### 4.4 Controles de Exportaci√≥n
- Selector para tipo de exportaci√≥n (proyecto, TXT, rama)
- Opciones adicionales: incluir estad√≠sticas, encabezados, markdown extendido, c√≥digo
- Vista previa del archivo TXT exportable
- Guardado con nombre personalizable
## 5. OPCIONES AVANZADAS
- Exportar solo una rama seleccionada (sub√°rbol):  
  - Si no hay selecci√≥n, mostrar aviso: ‚ÄúSelecciona una rama‚Äù.
- Incluir Notas T√©cnicas (campo markdown extendido ‚Äî ‚ÄúNotas T√©cnicas‚Äù)  
  - Notas ordenadas por jerarqu√≠a e insertadas bajo cada encabezado de carpeta/archivo en el TXT
- Incluir c√≥digo (campo de c√≥digo del nodo)
- Texto final personalizado al final del TXT (por ejemplo, conclusiones, notas globales)
## 6. FORMATO PROFESIONAL DE TXT
- Encabezado por rama/archivo exportado:
  ```txt
  // ===========================================================================================
  // Nombre archivo/carpeta - Markdown
  //
  // Notas t√©cnicas (si las hay)...
  // (c√≥digo, si se incluy√≥)
  ```
- Separadores claros entre ramas/archivos
- Resumen/estad√≠sticas al final
- Formato limpio, alineado, portable (LF/CRLF configurable)
## 7. SINCRONIZACI√ìN Y RENDIMIENTO
- Vista previa debe renderizarse inmediatamente ante:
  - Carga inicial (incluyendo la ra√≠z aunque est√© vac√≠a)
  - Cambios en el explorador de archivos, agregado/eliminado de nodos
  - Inclusi√≥n de markdowns, c√≥digo o notas t√©cnicas pegadas
  - Cambios de configuraci√≥n y modo
- Exportaci√≥n fiel y r√°pida, sin diferencias entre lo visto y lo guardado
## 8. EJEMPLO DE node_data
    "root": {"name": "Root", "type": "folder", "status": "‚úÖ", "markdown_short": "# Proyecto principal"},
    "src": {"name": "src", "type": "folder", "status": "‚¨ú", "markdown_short": "# C√≥digo fuente"},
    "main": {"name": "main.py", "type": "file", "status": "‚úÖ", "markdown_short": "# Punto de entrada principal"}
**Estos requerimientos son obligatorios para el sistema de vista previa y exportaci√≥n de TreeApp v4 Pro.**
# √Årbol de Carpetas Sugerido para TreeApp v4 Pro ‚Äî Vista Previa y Exportaci√≥n
Este √°rbol contempla una arquitectura granular y extensible para el desarrollo del sistema de vista previa, modos, exportaci√≥n y configuraciones.  
Incluye separaci√≥n entre l√≥gica de visualizaci√≥n, configuraciones, exportadores y recursos de interfaz.
# √Årbol de Carpetas Sugerido ‚Äî TreeApp v4 Pro (Versi√≥n Mejorada y Completa)
Este √°rbol integra todas las mejoras propuestas, contemplando panel de editor avanzado (los 4 campos), panel de √°rbol mejorado (explorador con drag & drop), integraci√≥n con EventBus/StateManager, importaci√≥n de √°rbol desde c√≥digo y separaci√≥n granular UI/l√≥gica/configuraci√≥n/exportaci√≥n.
treeapp_v4_pro/
‚îú‚îÄ‚îÄ main.py
‚îÇ
‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ app_controller.py          # Coordinador general de la app
‚îÇ   ‚îú‚îÄ‚îÄ event_bus.py               # Bus de eventos global (PubSub)
‚îÇ   ‚îú‚îÄ‚îÄ state_manager.py           # Undo/Redo, selecci√≥n, snapshot
‚îÇ   ‚îú‚îÄ‚îÄ performance_optimizer.py   # Cache y throttling inteligente
‚îÇ   ‚îî‚îÄ‚îÄ models/
‚îÇ       ‚îú‚îÄ‚îÄ init.py
‚îÇ       ‚îú‚îÄ‚îÄ node.py                # ‚úÖ Modelo principal de nodo
‚îÇ       ‚îú‚îÄ‚îÄ clipboard.py           # ‚úÖ Sistema de portapapeles avanzado
‚îÇ       ‚îú‚îÄ‚îÄ selection.py           # Selecci√≥n m√∫ltiple, rango, rama
‚îÇ       ‚îú‚îÄ‚îÄ duplicator.py          # Duplicaci√≥n de nodos y ramas
‚îÇ       ‚îú‚îÄ‚îÄ validators.py          # Validaci√≥n extendida
‚îÇ       ‚îú‚îÄ‚îÄ project.py             # Modelo de proyecto completo
‚îÇ       ‚îú‚îÄ‚îÄ tree_structure.py      # Estructura jer√°rquica y helpers
‚îÇ       ‚îî‚îÄ‚îÄ editor_fields.py       # Modelo y l√≥gica de los 4 campos (nombre, markdown, notas t√©cnicas, c√≥digo)                    
‚îÇ
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ config_manager.py
‚îÇ   ‚îú‚îÄ‚îÄ theme_manager.py
‚îÇ   ‚îú‚îÄ‚îÄ preview_configs/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ classic_config.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ascii_config.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ascii_folders_config.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ columns_config.py
‚îÇ   ‚îî‚îÄ‚îÄ presets/
‚îÇ       ‚îú‚îÄ‚îÄ compact.json
‚îÇ       ‚îú‚îÄ‚îÄ standard.json
‚îÇ       ‚îú‚îÄ‚îÄ detailed.json
‚îÇ       ‚îî‚îÄ‚îÄ user_presets.json
‚îÇ
‚îú‚îÄ‚îÄ panels/
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ enhanced_tree_panel.py
‚îÇ   ‚îú‚îÄ‚îÄ enhanced_editor_panel.py   # Fase 2: los 4 campos
‚îÇ   ‚îú‚îÄ‚îÄ enhanced_preview_panel.py
‚îÇ   ‚îî‚îÄ‚îÄ components/
‚îÇ       ‚îú‚îÄ‚îÄ tree_view.py
‚îÇ       ‚îú‚îÄ‚îÄ editor_fields.py
‚îÇ       ‚îú‚îÄ‚îÄ mode_selector.py
‚îÇ       ‚îú‚îÄ‚îÄ export_controls.py
‚îÇ       ‚îú‚îÄ‚îÄ stats_bar.py
‚îÇ       ‚îî‚îÄ‚îÄ notifications.py
‚îÇ
‚îú‚îÄ‚îÄ preview/
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ preview_engine.py
‚îÇ   ‚îú‚îÄ‚îÄ renderers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base_renderer.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ classic_renderer.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ascii_renderer.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ascii_folders_renderer.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ columns_renderer.py
‚îÇ   ‚îú‚îÄ‚îÄ configurators/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ universal_config.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ mode_configs.py
‚îÇ   ‚îî‚îÄ‚îÄ filters.py
‚îÇ
‚îú‚îÄ‚îÄ export/
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ export_manager.py
‚îÇ   ‚îú‚îÄ‚îÄ txt_exporter.py
‚îÇ   ‚îú‚îÄ‚îÄ wjp_exporter.py
‚îÇ   ‚îú‚îÄ‚îÄ formatter.py
‚îÇ   ‚îî‚îÄ‚îÄ dialogs/
‚îÇ       ‚îú‚îÄ‚îÄ save_as_dialog.py
‚îÇ       ‚îî‚îÄ‚îÄ export_options_dialog.py
‚îÇ
‚îú‚îÄ‚îÄ tree_operations/
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ drag_drop_handler.py
‚îÇ   ‚îú‚îÄ‚îÄ tree_importer.py
‚îÇ   ‚îú‚îÄ‚îÄ node_operations.py
‚îÇ   ‚îú‚îÄ‚îÄ tree_builder.py
‚îÇ   ‚îî‚îÄ‚îÄ history_manager.py
‚îÇ
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ menu_bar.py
‚îÇ   ‚îú‚îÄ‚îÄ toolbar.py
‚îÇ   ‚îú‚îÄ‚îÄ status_bar.py
‚îÇ   ‚îú‚îÄ‚îÄ layout_manager.py
‚îÇ   ‚îî‚îÄ‚îÄ dialogs/
‚îÇ       ‚îú‚îÄ‚îÄ preferences_dialog.py
‚îÇ       ‚îú‚îÄ‚îÄ about_dialog.py
‚îÇ       ‚îú‚îÄ‚îÄ tree_import_dialog.py
‚îÇ       ‚îî‚îÄ‚îÄ export_preview_dialog.py
‚îÇ
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ file_utils.py
‚îÇ   ‚îú‚îÄ‚îÄ validators.py
‚îÇ   ‚îú‚îÄ‚îÄ text_processors.py
‚îÇ   ‚îú‚îÄ‚îÄ ui_helpers.py
‚îÇ   ‚îî‚îÄ‚îÄ clipboard_manager.py   # Si se separa UI del modelo de portapapeles
‚îÇ
‚îú‚îÄ‚îÄ resources/
‚îÇ   ‚îú‚îÄ‚îÄ icons/
‚îÇ   ‚îú‚îÄ‚îÄ themes/
‚îÇ   ‚îî‚îÄ‚îÄ locales/
‚îÇ
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ test_node_model.py
‚îÇ   ‚îú‚îÄ‚îÄ test_clipboard.py
‚îÇ   ‚îú‚îÄ‚îÄ test_editor_panel.py
‚îÇ   ‚îú‚îÄ‚îÄ test_preview.py
‚îÇ   ‚îú‚îÄ‚îÄ test_export.py
‚îÇ   ‚îî‚îÄ‚îÄ test_tree_operations.py
‚îÇ
‚îî‚îÄ‚îÄ docs/
    ‚îú‚îÄ‚îÄ REQUERIMIENTOS.md
    ‚îú‚îÄ‚îÄ ARBOL_CARPETAS_TREEAPP_V4_PRO.md
    ‚îî‚îÄ‚îÄ ejemplos_exportacion/
        ‚îú‚îÄ‚îÄ ejemplo_clasico.txt
        ‚îú‚îÄ‚îÄ ejemplo_ascii.txt
        ‚îú‚îÄ‚îÄ ejemplo_ascii_folders.txt
        ‚îú‚îÄ‚îÄ ejemplo_columnas.txt
        ‚îî‚îÄ‚îÄ ejemplo_profesional.txt


### Notas adicionales:
- Integraci√≥n total entre paneles UI y l√≥gica (EventBus, StateManager).
- Los 4 campos del editor (nombre, markdown, notas t√©cnicas, c√≥digo) con controles avanzados y validaci√≥n, incluidos en modelos y UI.
- Explorador de √°rbol mejorado con drag & drop, importaci√≥n desde c√≥digo y operaciones avanzadas.
- Sistema de preview modular, renderers y configuraciones independientes.
- Exportaci√≥n profesional, fiel a la vista previa, con opciones avanzadas.
- Facilita QA, mantenimiento y futuras extensiones.
**Este √°rbol es la base ideal para un TreeApp v4 Pro profesional, flexible y escalable.**


cuando los archivos superen las 450 lineas de codigo son una se√±al para remanufacturar dividiendo responsabilidades
