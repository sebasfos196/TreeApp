
Algunos archivos del proyecto en https://github.com/sebasfos196/TreeApp


ARBOL DE CARPETAS DE TREEAPP_V4_PRO REMANUFACTURADO 

treeapp_v4_pro/
├── main.py
├── domain/
│   ├── events/
│   │   ├── event_bus.py              # 50 líneas
│   │   ├── event_handler.py          # 30 líneas  
│   │   ├── node_events.py            # 40 líneas
│   │   ├── tree_events.py            # 40 líneas
│   │   └── project_events.py         # 35 líneas
│   ├── node/
│   │   ├── node_entity.py            # 60 líneas
│   │   ├── node_id.py                # 25 líneas
│   │   ├── node_name.py              # 35 líneas
│   │   ├── node_type.py              # 25 líneas
│   │   ├── node_status.py            # 30 líneas
│   │   ├── node_content.py           # 50 líneas
│   │   └── node_factory.py           # 40 líneas
│   ├── tree/
│   │   ├── tree_entity.py            # 70 líneas
│   │   ├── tree_walker.py            # 60 líneas
│   │   ├── tree_validator.py         # 65 líneas
│   │   └── tree_operations.py        # 70 líneas
│   ├── project/
│   │   ├── project_entity.py         # 50 líneas
│   │   └── project_settings.py       # 35 líneas
│   └── validation.py                 # 60 líneas
├── application/
│   ├── commands/
│   │   ├── command_bus.py            # 40 líneas
│   │   ├── node/
│   │   │   ├── create_node_command.py # 35 líneas
│   │   │   ├── update_node_command.py # 40 líneas
│   │   │   └── delete_node_command.py # 30 líneas
│   │   ├── tree/
│   │   │   ├── import_tree_command.py # 45 líneas
│   │   │   └── export_tree_command.py # 40 líneas
│   │   └── project/
│   │       ├── create_project_command.py # 35 líneas
│   │       └── save_project_command.py   # 40 líneas
│   ├── queries/
│   │   ├── node_queries.py           # 50 líneas
│   │   ├── tree_queries.py           # 45 líneas
│   │   └── project_queries.py        # 35 líneas
│   └── services/
│       ├── import_service.py         # 70 líneas
│       ├── export_service.py         # 65 líneas
│       └── notification_service.py   # 40 líneas
├── infrastructure/
│   ├── persistence/
│   │   ├── json_repository.py        # 70 líneas
│   │   └── backup_manager.py         # 50 líneas
│   ├── import_export/
│   │   ├── parsers/
│   │   │   ├── text_parser.py        # 80 líneas
│   │   │   └── markdown_parser.py    # 60 líneas
│   │   ├── exporters/
│   │   │   ├── txt_exporter.py       # 70 líneas
│   │   │   └── html_exporter.py      # 80 líneas
│   │   └── format_detector.py        # 45 líneas
│   └── file_system/
│       ├── file_utils.py             # 50 líneas
│       └── path_utils.py             # 35 líneas
├── presentation/
│   ├── main_window.py                # 60 líneas
│   ├── controllers/
│   │   ├── main_controller.py        # 70 líneas
│   │   ├── tree_controller.py        # 80 líneas
│   │   ├── editor_controller.py      # 75 líneas
│   │   └── preview_controller.py     # 70 líneas
│   ├── views/
│   │   ├── panels/
│   │   │   ├── tree_panel/
│   │   │   │   ├── tree_view.py      # 80 líneas
│   │   │   │   ├── drag_drop.py      # 60 líneas
│   │   │   │   └── context_menu.py   # 50 líneas
│   │   │   ├── editor_panel/
│   │   │   │   ├── editor_container.py # 50 líneas
│   │   │   │   ├── name_field.py     # 45 líneas
│   │   │   │   ├── markdown_field.py # 70 líneas
│   │   │   │   ├── notes_field.py    # 60 líneas
│   │   │   │   └── code_field.py     # 80 líneas
│   │   │   └── preview_panel/
│   │   │       ├── preview_container.py # 50 líneas
│   │   │       ├── mode_selector.py  # 40 líneas
│   │   │       ├── config_panel.py   # 60 líneas
│   │   │       └── renderers/
│   │   │           ├── classic_renderer.py  # 70 líneas
│   │   │           ├── ascii_renderer.py    # 80 líneas
│   │   │           ├── folders_renderer.py  # 60 líneas
│   │   │           └── columns_renderer.py  # 90 líneas
│   │   └── widgets/
│   │       ├── text_field.py         # 50 líneas
│   │       ├── button.py             # 35 líneas
│   │       ├── toolbar.py            # 60 líneas
│   │       └── status_bar.py         # 45 líneas
│   └── dialogs/
│       ├── preferences_dialog.py     # 80 líneas
│       ├── import_dialog.py          # 70 líneas
│       ├── export_dialog.py          # 75 líneas
│       ├── about_dialog.py           # 35 líneas
│       └── shortcuts_dialog.py       # 40 líneas
├── shared/
│   ├── config/
│   │   ├── config_manager.py         # 50 líneas
│   │   ├── theme_manager.py          # 70 líneas
│   │   └── settings.py               # 40 líneas
│   ├── utils/
│   │   ├── string_utils.py           # 40 líneas
│   │   ├── validation_utils.py       # 50 líneas
│   │   ├── id_generator.py           # 20 líneas
│   │   └── date_utils.py             # 30 líneas
│   └── constants/
│       ├── app_constants.py          # 30 líneas
│       ├── ui_constants.py           # 25 líneas
│       └── file_constants.py         # 20 líneas
├── resources/
│   ├── themes/
│   ├── icons/
│   └── templates/
└── config/
    ├── app_config.json
    └── user_preferences.json


# 🌳 Funcionalidades del Explorador de Proyectos (Tree Explorer)

Este documento detalla las capacidades esenciales y los criterios UX que debe cumplir el Explorador de Proyectos de TreeApp v4 Pro.  
**Las siguientes funcionalidades deben preservarse y testearse tras cada refactor.**
---
## 1. Visualización jerárquica
- [ ] Muestra carpetas y archivos en estructura de árbol.
- [ ] Iconos distintos para carpetas y archivos.
- [ ] Expandir/colapsar nodos con clic o doble clic.
## 2. Drag & Drop avanzado
- [ ] Mover nodos (carpetas/archivos) arrastrando.
- [ ] Selección múltiple (Ctrl/Shift + clic).
- [ ] Feedback visual durante el drag (colores, cursor).
- [ ] Validación de jerarquía (no permite loops ni hijos inválidos).
- [ ] Expansión automática de nodos al arrastrar sobre ellos.
- [ ] Indicador visual claro de dónde se soltará el nodo (destino drop).
## 3. Operaciones contextuales
- [ ] Menú contextual con clic derecho:
    - [ ] Crear nueva carpeta/archivo.
    - [ ] Renombrar nodo (sin tapar el icono).
    - [ ] Eliminar nodo (también con tecla Delete).
    - [ ] Cambiar estado (ej: completado, pendiente).
- [ ] Atajos de teclado para todas las acciones comunes.
## 4. Portapapeles avanzado
- [ ] Soporta copiar/cortar varios nodos.
- [ ] Pegado con validación de jerarquía y auto-renombrado en caso de conflicto.
- [ ] Indicación visual de elementos “cortados”.
## 5. Edición en línea
- [ ] Renombrado directo con doble clic o desde menú contextual.
- [ ] Validación en tiempo real del nombre (caracteres válidos, duplicados).
## 6. Actualización en tiempo real
- [ ] Cambios instantáneos reflejados en:
    - [ ] El árbol.
    - [ ] La vista previa.
    - [ ] El markdown de nombre de archivo/carpeta.
- [ ] Sincronización visual automática tras cualquier operación.
## 7. Filtrado y búsqueda (opcional)
- [ ] Campo de búsqueda para filtrar nodos por nombre o estado.
- [ ] Resalta resultados en el árbol.
## 8. Visualización flexible
- [ ] El árbol lateral siempre muestra la estructura jerárquica estándar.
- [ ] Los modos de vista (clásica, ASCII, solo carpetas) se aplican únicamente en la vista previa/exportación, **no en el árbol de explorador**.
- [ ] Opciones de zoom o ajuste de fuente/espaciado en la vista previa.
- [ ] Scroll vertical y horizontal optimizado donde corresponda.
## 9. Feedback visual y accesibilidad
- [ ] Resaltado claro de selección.
- [ ] Tooltips con información de cada nodo.
- [ ] Accesibilidad por teclado y soporte para lectores de pantalla.
## 10. Sincronización con otras vistas
- [ ] Seleccionar un nodo sincroniza el editor/vista previa.
- [ ] Cambios en el editor se reflejan en el árbol, markdown, nombre, etc. y viceversa.
## 11. Deshacer y rehacer
- [ ] Botón de deshacer (Undo).
- [ ] Botón de rehacer (Redo).
- [ ] Acceso a Undo/Redo desde menú contextual y barra de herramientas.
**Este checklist debe cumplirse siempre.  
No merges cambios que degraden alguna funcionalidad de esta lista.**


✅ Requisitos Funcionales – Gestión Avanzada de Árboles
1. 🌳 Múltiples Árboles Simultáneos
El explorador debe permitir tener varios árboles/proyectos abiertos al mismo tiempo.
Cada árbol es una instancia independiente con su propio nodo raíz.
Visualmente, se deben mostrar como bloques separados o secciones en el panel izquierdo.
Cada árbol puede ser:
Creado manualmente (Nuevo árbol)
Importado desde texto
Resultado de una operación de duplicación/desacoplamiento

2. 🖱️ Menú contextual para gestión de árboles
Disponible al hacer clic derecho sobre:
El espacio vacío del explorador
La cabecera de un árbol
Un nodo raíz

Opciones sugeridas:
➕ Nuevo árbol / proyecto
🗂 Cerrar árbol
✂️ Separar rama como árbol nuevo (solo en nodos no raíz)
🔁 Fusionar con otro árbol (si hay más de uno)
💾 Guardar todos los árboles

3. 📥 Importación desde la ventana de código
El contenido se pega o escribe directamente en el editor de texto.
El sistema detecta automáticamente si es:
Un árbol ASCII (tree)
Una lista indentada
Una lista de rutas
Acciones disponibles (post pegado):
Agregar como rama al nodo seleccionado
Crear nuevo árbol con esta estructura
Previsualizar la estructura antes de insertar

4. 🔀 Drag & Drop entre árboles
Se puede:
Mover una rama completa de un árbol a otro
Fusionar árboles arrastrando un nodo raíz dentro de otro árbol
Reordenar visualmente los árboles o sus ramas
El sistema debe validar jerarquías y evitar ciclos

5. 🔓 Desacoplar rama del árbol
Clic derecho sobre un nodo permite:
Separar esta rama
La rama pasa a ser un nuevo árbol independiente
El nuevo árbol aparece como una nueva sección en el explorador

6. 🧩 Operaciones avanzadas
Unir árboles: fusiona un árbol arrastrado dentro de otro
Deshacer última importación si fue incorrecta
Reasignar nodo raíz: permitir cambiar la raíz de un árbol






# 🌳 Agregar múltiples objetos al árbol desde la ventana de código
Este documento define los requerimientos completos para la funcionalidad de agregar ramas/carpetas y archivos al árbol de proyectos **desde la ventana de código** en TreeApp v4 Pro.
## 🎯 Objetivo
Permitir al usuario crear estructuras jerárquicas de carpetas y archivos pegando o escribiendo texto estructurado en la ventana de código (columna 2), con o sin contenido markdown.  
Esta función reemplaza el antiguo "pegar árbol" del explorador de proyectos y ofrece un flujo más flexible y productivo.
## 📝 Requerimientos funcionales
### 1. Botón y campo de entrada
- [ ] La ventana de código debe tener un botón visible llamado “Agregar árbol”, “Agregar objetos”, “New Branch” o similar.
- [ ] Al pulsarlo, se muestra un campo de texto multilinea donde el usuario puede pegar o escribir la estructura deseada de carpetas/archivos.
- [ ] El campo debe aceptar tanto listas simples como estructuras jerárquicas (tabulaciones, guiones, etc.), y archivos con o sin contenido markdown.
### 2. Análisis y detección automática
- [ ] El sistema debe analizar el texto pegado y detectar automáticamente:
    - Jerarquía de carpetas y archivos.
    - Si un bloque es archivo, carpeta o ambos.
    - Si incluye contenido markdown, este se debe asociar al archivo correspondiente.
- [ ] Debe soportar diferentes estilos de entrada (tabulado, guiones, listas markdown, etc.).
### 3. Previsualización y confirmación
- [ ] Antes de agregar, mostrar una previsualización clara de cómo quedará la estructura en el árbol.
- [ ] Indicar visualmente el destino de la inserción:
    - Si hay nodo seleccionado en el explorador, se agrega como hijo de ese nodo.
    - Si no hay selección, se agrega en la raíz.
- [ ] Si el usuario selecciona la opción “Reemplazar rama”, mostrar advertencia y preview indicando que se eliminará la rama seleccionada y se reemplazará por la nueva estructura.
### 4. Manejo de conflictos
- [ ] Validar y manejar nombres duplicados (auto-renombrar o avisar al usuario).
- [ ] Validar jerarquía para evitar inconsistencias (loops, hijos inválidos, etc.).
- [ ] Si se reemplaza una rama, pedir confirmación explícita.
### 5. Operación masiva y atómica
- [ ] Toda la estructura se agrega o reemplaza en una sola operación atómica.
- [ ] Si ocurre un error, revertir todo y mostrar mensaje claro al usuario.
### 6. Feedback visual y accesibilidad
- [ ] El usuario debe ver inmediatamente el resultado de la operación en el explorador de proyectos y en la vista previa.
- [ ] El sistema debe soportar atajos de teclado (Ctrl+Enter para confirmar, Esc para cancelar).
- [ ] La UI debe ser accesible (navegable por teclado, tooltips, etc.).
### 7. Deshacer y rehacer (Undo/Redo)
- [ ] Toda acción de agregar o reemplazar objetos desde la ventana de código debe poder deshacerse y rehacerse.
- [ ] El usuario puede acceder a undo/redo por:
    - Atajos estándar (Ctrl+Z / Ctrl+Y).
    - Botones en la barra de herramientas y menú contextual.
- [ ] Al deshacer, se revierte toda la operación.
- [ ] Al rehacer, se restaura la operación completa.
## 🛠️ Requerimientos técnicos
- [ ] Analizador/parsing robusto para diferentes estilos de entrada (tab, guiones, listas, markdown).
- [ ] Interfaz reactiva para previsualización y confirmación.
- [ ] Integración con el sistema de comandos/undo-redo global de la app.
- [ ] Manejo eficiente de estructuras grandes (performance).
- [ ] Documentación y pruebas de cada funcionalidad.
## 📚 Ejemplo de flujo de usuario
1. Usuario selecciona un nodo del árbol (opcional).
2. Usuario pega o escribe la estructura de carpetas/archivos en la ventana de código.
3. Usuario pulsa “Agregar árbol”.
4. El sistema analiza la estructura, muestra la previsualización y el destino.
5. Usuario confirma (o elige reemplazar rama).
6. El sistema agrega/reemplaza la estructura, actualiza el árbol y la vista previa.
7. Usuario puede deshacer/rehacer la acción en cualquier momento.
## 📝 Ejemplo de entrada soportada
```
Proyecto/
    docs/
        introduccion.md
        guia.md
    src/
        main.py
        utils.py
Notas generales.md
O bien con markdown:
notas.md
# Título de las notas
Este archivo fue generado automáticamente.
## 🛡️ Notas finales
- La función “Pegar árbol” se elimina del menú/contexto del explorador de proyectos.
- Todas las inserciones y reemplazos deben poder deshacerse/rehacerse.
- El usuario debe tener siempre control y feedback claro sobre la operación.
**Estos requerimientos son obligatorios y deben cumplirse antes de aprobar cualquier implementación de la función.**
## Agregar estructura al árbol mediante "pegar" en la ventana de código
- El usuario pega o escribe la estructura deseada (carpetas, archivos, markdown, etc.) directamente en la **ventana de código**.
- Al presionar el botón **Agregar**, la aplicación analiza y agrega todos los objetos al árbol.
- El sistema detecta automáticamente el tipo de entrada (no es necesario seleccionar "importar" ni el tipo de archivo).
- El flujo es directo, simple y eficiente: **Ventana de código + Botón Agregar**.
# Requerimientos funcionales — Columna 2 (Zona de Markdown)
La columna central de TreeApp (zona de markdowns) debe contar con 4 inputs diferenciados, cada uno con sus propias características, controles y acciones específicas. Esta área debe ser altamente flexible, interactiva y orientada a productividad.
## 1. Input de Nombre (Archivo/Rama)
**Descripción:**  
Campo de texto para editar el nombre del archivo o rama actualmente seleccionada.
**Características:**
- Campo de texto de línea única, editable.
- [✓] Label/title visible: “Nombre de archivo/rama”.
- [✓] Botón de copiar nombre.
- [✓] Botón de borrar (vacía el campo).
- [✓] Acción “Renombrar” sincroniza el cambio en el explorador y la vista previa en tiempo real.
- [✓] Validación de nombre (no vacío, sin caracteres prohibidos).
- [✓] Atajo de teclado: [F2] para editar rápido.
- [✓] Botón de colapsar/expandir bloque.
- [✓] Selección de todo el texto al enfocar.
- [✓] Soporte para copiar, pegar, cortar, borrar, seleccionar todo (Ctrl+C/V/X/A/Del).
- [✓] Tooltip con nombre completo si está truncado.
- [✓] Feedback visual al copiar, borrar, renombrar.
- [✓] Modo sólo lectura cuando corresponde (por permisos).
## 2. Input de Texto Markdown (Editor principal)
Área de texto principal para editar el contenido markdown del archivo.
- Editor multilínea con scroll vertical.
- [✓] Label/title visible: “Contenido Markdown”.
- [✓] Numeración de filas (opcional, configurable).
- [✓] Syntax highlighting para markdown.
- [✓] Botón de copiar todo el contenido.
- [✓] Botón de borrar (vacía el contenido).
- [✓] Botón “Pegar” para importar texto desde portapapeles.
- [✓] Atajos estándar: copiar, cortar, pegar, seleccionar todo, deshacer, rehacer.
- [✓] Soporte para drag & drop de texto.
- [✓] Ajuste de tamaño vertical mediante slider o arrastrando el borde inferior.
- [✓] Tooltip con preview del contenido.
- [✓] Cambio en tiempo real refleja en la vista previa y en el árbol si corresponde.
- [✓] Opción para expandir a pantalla completa (modo focus).
- [✓] Scroll sincronizado con vista previa (opcional).
- [✓] Conteo de caracteres y palabras.
- [✓] Ctrl+S o botón para guardar/cerrar edición.
- [✓] Resaltado de línea actual.
- [✓] Feedback visual al copiar, borrar, guardar.
- [✓] Exportar contenido a archivo externo (opcional).
- [✓] Opciones de accesibilidad (fuentes grandes, contraste, etc).
## 3. Input de Explicación Extendida NOMBRE:Notas Técnicas
Campo para una explicación adicional, comentarios, o metadatos descriptivos del archivo o carpeta.
- Editor de texto multilínea (más pequeño que el markdown principal).
- [✓] Label/title visible: “Descripción extendida” o “Notas”.
- [✓] Botón de copiar texto.
- [✓] Atajos de copiar, pegar, seleccionar, borrar, deshacer, rehacer.
- [✓] Puede mostrar preview en tooltip.
- [✓] Soporta links y formato simple (bold, italic, opcional).
- [✓] Puede ser colapsado por defecto para ahorrar espacio.
- [✓] Sincronización instantánea con metadatos del sistema.
- [✓] Ajuste de tamaño vertical mediante slider/handle.
- [✓] Feedback visual al copiar, borrar.
- [✓] Opción para expandir a pantalla completa (opcional).
## 4. Ventana de Código (Zona de estructura/código libre)
Área de código para pegar, editar o generar estructuras de árbol, scripts, fragmentos de configuración, etc.
- Editor multilínea avanzado, tipo “code editor”.
- [✓] Label/title visible: “Ventana de código” o “Estructura a agregar”.
- [✓] Numeración de filas siempre visible.
- [✓] Syntax highlighting básico (markdown, texto plano, árbol, opcional).
- [✓] Botón de copiar todo el bloque de código.
- [✓] Atajos de copiar, pegar, cortar, seleccionar todo, deshacer, rehacer.
- [✓] Soporte para “pegar estructura” (entrada principal para agregar al árbol).
- [✓] Botón “Agregar” (acción principal de esta zona).
- [✓] Ajuste de tamaño vertical por slider/handle.
- [✓] Drag & drop de texto compatible.
- [✓] Modo pantalla completa.
- [✓] Conteo de líneas/caracteres.
- [✓] Scroll independiente.
- [✓] Validaciones contextuales (estructura válida, feedback visual).
- [✓] Scroll horizontal si excede ancho.
- [✓] Botón de “limpiar todo”.
- [✓] Feedback visual al copiar, borrar, agregar.
- [✓] Integración directa con el árbol y la vista previa.
## Controles y Flexibilidad Comunes
- [✓] Cada bloque/input tiene su propio título y puede ser colapsado/expandido individualmente con un botón visible.
- [✓] Todos los campos soportan copiar, pegar, cortar, borrar, seleccionar todo, con atajos estándar (Ctrl/Cmd+C/V/X/A/Del).
- [✓] Selección de texto con doble click y triple click (palabra/fila).
- [✓] Botón de “copiar todo” para cada bloque.
- [✓] Interfaz flexible: cada input se puede redimensionar verticalmente por el usuario (slider o arrastrando borde inferior).
- [✓] Feedback visual cuando se copia o borra (mensaje “copiado”, “borrado”).
- [✓] Navegación rápida por teclado entre bloques (Tab/Shift+Tab).
- [✓] Integración con sistema de deshacer/rehacer global.
- [✓] Configuración de visibilidad y orden de inputs desde preferencias de usuario (opcional).
- [✓] Tooltips informativos en íconos y botones.
- [✓] Accesibilidad: soporta lectores de pantalla y navegación por teclado.
- [✓] Todos los estados (colapsado/expandido, tamaño) se recuerdan por sesión/usuario.
## Estado y Sincronización
- Cambios en el campo de nombre actualizan árbol y preview en tiempo real.
- Cambios en markdown y descripción se reflejan instantáneamente en la vista previa.
- La ventana de código es la fuente principal para agregar estructuras al árbol (pasting y botón agregar).
- Deshacer/rehacer válido para todas las acciones de texto.
- Los inputs recuerdan su estado de colapsado/expandido y tamaño.
- Sincronización visual con explorador y panel de preview.
## Botonera común por bloque
- [ Copiar ] [ Borrar ] [ Colapsar/Expandir ] [ (Opcional) Exportar ] [ (Opcional) Pantalla completa ]
**Todos estos requerimientos deben cumplirse para la columna 2 de 
# Requerimientos funcionales — Vista Previa: Tree
La vista previa denominada **Tree** debe mostrar, en tiempo real y de forma clara, la estructura lógica del proyecto (árbol de carpetas y archivos), sus atributos y descripciones asociadas. Debe ser altamente flexible, configurable y exportable en distintos formatos.
## 1. Estructura General
- Visualización jerárquica tipo árbol (carpetas y archivos con indentación).
- **Renderización inmediata desde el inicio**: el árbol debe mostrarse apenas se cargue cualquier dato del explorador de archivos, aun cuando el proyecto esté vacío o recién creado.
- **Agregar y mostrar siempre la primera carpeta raíz** al iniciar el programa, incluso si el usuario abre un proyecto nuevo y la estructura aún está vacía.
- Renderizado inmediato ante cualquier cambio:  
  - Carga inicial de archivos y carpetas (explorador, drag & drop, importación).
  - Adición de nuevos archivos/carpeta.
  - Inclusión instantánea de archivos/carpetas/ramas agregados mediante "pegar" o desde markdowns en la zona de código.
- Soporte para estructuras anidadas de cualquier profundidad.
- Distinción visual entre carpetas y archivos (iconos, colores, estilos de línea o prefijos).
- Atributos/estados adicionales visibles por cada nodo (ej: estado: ✅❌⬜, prioridad, etiquetas).
- Columna de descripción/markdown visible junto a cada archivo/carpeta.
- Opcional: numeración o contadores de nodos/archivos/carpetas.
## 2. Modos de Visualización
- **Clásico**: Árbol con indentación, iconos de tipo y estados, descripciones a la derecha.
- **ASCII Completo**: Árbol con caracteres ASCII (├──, └──), mostrando carpetas y archivos, alineaciones configurables.
- **ASCII Solo Carpetas**: Solo muestra la jerarquía de carpetas, con archivos opcionalmente ocultos o listados como resumen.
- **Columnas**: Tabla alineada tipo Excel, con columnas configurables (Ruta, Estado, Markdown), separadores visibles y redimensionables.
## 3. Configuración de Columnas (Modo Columnas)
- Columnas redimensionables por drag & drop del separador.
- Ancho mínimo/máximo configurable por columna.
- Orden de columnas configurable (ej: Ruta | Estado | Descripción).
- Alineación por columna (izquierda, centro, derecha).
- Truncado de texto largo configurable (con tooltip para ver el contenido completo).
- Opción para auto-ajustar ancho al contenido más largo.
- Presets de layout: compacto, estándar, extendido, personalizado.
- Visualización de encabezados y separadores claros.
## 4. Exportación
- Exportación a TXT con el layout y espaciamiento configurado (manteniendo alineación de columnas, separadores, indentación y truncado).
- Opción para incluir/excluir atributos (iconos, estado, markdown).
- Incluye encabezado con nombre del proyecto, fecha, configuración aplicada y estadísticas.
- Soporte para exportar solo la rama/nodo actual o toda la estructura.
- Opción para exportar en los 4 modos de visualización (Clásico, ASCII Completo, ASCII Carpetas, Columnas).
- Exportación rápida vía botón visible.
## 5. Controles y Flexibilidad
- Panel de configuración para ajustar los anchos, orden, visibilidad de columnas y otros parámetros.
- Soporte para presets reutilizables de visualización/exportación.
- Accesibilidad: alto contraste, navegación por teclado, tooltips informativos.
- Scroll vertical/horizontal según el contenido.
- Feedback visual instantáneo al modificar configuración o datos.
- Opción para colapsar/expandir ramas del árbol.
- Contador de elementos por carpeta y totales del árbol (opcional).
- Vista previa en tiempo real antes de exportar.
## 6. Interacción y Usabilidad
- Hover sobre nodos muestra tooltip con detalles completos (nombre, descripción, estado, metadatos).
- Click derecho sobre nodo abre menú contextual (acciones: copiar ruta, copiar markdown, expandir/colapsar, incluir/excluir en exportación).
- Selección múltiple de nodos para acciones en lote (opcional).
- Navegación por teclado entre nodos.
- Doble click para auto-expandir/colapsar rama.
## 7. Estado y Sincronización
- **Renderización inmediata ante cualquier evento:**  
  - Al cargar el explorador de archivos.
  - Al agregar cualquier archivo o carpeta, ya sea desde la UI, desde la zona de código (pasting), o desde markdowns pegados.
  - Cuando se crea un nuevo proyecto o se importa uno existente.
- Refleja en tiempo real todos los cambios realizados en la columna 2.
- Sincronización automática con el árbol principal y la estructura interna de datos.
- Recuerda configuración de layout, ancho de columnas y colapsado/expandido de ramas por sesión.
## 8. Estadísticas y Resúmenes (Opcional)
- Muestra resumen de cantidad de carpetas, archivos, completados, pendientes, etc.
- Resumen visible en la parte inferior o al exportar.
**Todos estos requerimientos deben cumplirse para la vista previa tipo Tree en TreeApp.**
# Requerimientos funcionales — Exportación desde Tree (Vista previa)
## 1. Diálogo “Guardar como…”
Al pulsar exportar desde la vista Tree, debe abrirse un diálogo con al menos estas opciones:
- **Guardar como Proyecto (.wjp):**  
  Guarda toda la estructura, metadatos y notas en un formato editable propietario.
- **Exportar como TXT:**  
  Presenta subopciones para personalizar el contenido y formato del TXT exportado:
  ### Opciones de formato:
  - Formato de vista previa:  
    - Clásico  
    - ASCII  
    - Columnas
  ### Opciones de inclusión:
  - Incluir **Notas Técnicas** (campo 3, ahora llamado así).
  - Incluir **Código** (contenido del campo de código).
  - Exportar **solo una rama seleccionada** del árbol:  
    - Si está seleccionada una rama, exporta únicamente ese subárbol y su contenido.  
    - Si no hay selección, mostrar aviso: “Selecciona una rama”.
## 2. Formato profesional de exportación TXT
Cada carpeta o archivo exportado como rama principal o subrama debe ir precedido de un **encabezado profesional**.  
Si existen Notas Técnicas asociadas (campo 3), deben incluirse ordenadas y visibles antes del contenido de código.
### Estructura del encabezado por rama/archivo:
```txt
// ===========================================================================================
// Nombre archivo/carpeta - Markdown
//
// Notas técnicas (si las hay)...
- El bloque de Notas Técnicas se coloca inmediatamente después del encabezado, antes del código o cualquier otro contenido.
- Si se exporta solo una rama, el encabezado hace referencia al nombre de la rama/archivo.
- Si se exportan varias ramas, cada una puede ir precedida de su propio encabezado.
- El contenido de código (si se incluye) va después de las notas técnicas.
## 3. Inclusión de Notas Técnicas
- Al activar la opción “Incluir Notas Técnicas”, el sistema debe tomar el contenido del campo Notas Técnicas (campo 3) de cada nodo y ubicarlo bajo el encabezado correspondiente en el TXT.
- El orden de las notas debe respetar la jerarquía del árbol, es decir, primero las de la rama principal y luego las de cada subrama o archivo, siguiendo la estructura exportada.
- Si un nodo no tiene notas técnicas, se omite ese bloque en el encabezado de ese nodo.
## 4. Inclusión de Código
- Al activar la opción “Incluir Código”, el sistema debe agregar el contenido del campo de código (campo 4) después de las Notas Técnicas, manteniendo el mismo orden jerárquico y de encabezados.
## 5. Orden y claridad
- El TXT debe ser claro, ordenado y legible, con separación suficiente entre ramas, notas y código.
- Todos los encabezados deben ser fácilmente reconocibles y estar alineados.
- Las opciones de exportación deben ser accesibles y recordadas por defecto para futuras exportaciones (opcional).
## 6. Ejemplo de resultado TXT
// CarpetaRaiz - Descripción Markdown
// Notas técnicas de la carpeta raíz...
// (Código de la carpeta raíz, si aplica)
// ---------------------------------------
// subcarpeta1 - Descripción Markdown
// Notas técnicas de subcarpeta1...
// (Código de subcarpeta1)
// archivo.txt - Descripción Markdown
// Notas técnicas del archivo...
// (Código del archivo)
**Estos requerimientos aplican a la exportación en TXT desde la vista Tree y al nuevo diálogo "Guardar como..."**
Necesito implementar un sistema completo de vista previa para TreeApp v4 Pro 
(Python/Tkinter) con las siguientes especificaciones exactas:
═══════════════════════════════════════════════════════════════════════════════
CONTEXTO DE LA APLICACIÓN:
- TreeApp v4 Pro: Organizador visual de proyectos tipo árbol de archivos
- Panel derecho dedicado a vista previa de la estructura del proyecto
- Datos disponibles: node_data con rutas, estados (emojis ✅❌⬜), contenido markdown
REQUERIMIENTO PRINCIPAL:
Sistema de vista previa con 4 modos de visualización diferentes, cada uno 
con elementos configurables y capacidad de exportación TXT manteniendo 
el formato exacto configurado en la interfaz.
ESPECIFICACIONES DE LOS 4 MODOS:
1. MODO CLÁSICO:
   - Indentación jerárquica simple (configurable: 1-8 espacios)
   - Iconos opcionales (📁📄)
   - Estados centrados con separación configurable
   - Markdown truncado (longitud configurable)
2. MODO ASCII COMPLETO:
   - Caracteres ASCII para jerarquía: ├── └── │ (configurables)
   - Líneas de conexión continuas
   - Separadores configurables entre elementos
   - Opción Unicode/ASCII básico
3. MODO ASCII SOLO CARPETAS:
   - Muestra únicamente estructura de carpetas
   - Contador de archivos por carpeta
   - Estadísticas de archivos ocultos al final
   - Resumen por estados
4. MODO COLUMNAS (Estilo Excel):
   - 3 columnas redimensionables: Ruta | Estado | Markdown
   - Arrastrar separadores para ajustar anchos
   - Doble click para auto-ajustar al contenido
   - Límites mín/máx configurables por columna
ELEMENTOS CONFIGURABLES UNIVERSALES:
- Mostrar/ocultar iconos (📁📄)
- Mostrar/ocultar estados (✅❌⬜)  
- Mostrar/ocultar descripciones markdown
- Longitud máxima de markdown (truncado con "...")
- Profundidad máxima de visualización
- Separación entre elementos (espacios configurables)
- Colores alternados en filas
- Filtros por tipo (todos/archivos/carpetas/por estado)
- Ordenación (nombre/tipo/estado/fecha)
SISTEMA DE EXPORTACIÓN TXT:
Cada modo debe poder exportar a TXT manteniendo EXACTAMENTE el formato 
y espaciado configurado en la interfaz, incluyendo:
- Encabezado del proyecto con modo utilizado
- Configuración aplicada documentada
- Estructura con formato específico del modo
- Estadísticas detalladas del proyecto
- Fecha y hora de exportación
- Separadores visuales apropiados
INTERFAZ REQUERIDA:
1. SELECTOR DE MODO:
   - Dropdown con los 4 modos
   - Botón de configuración por modo
   - Vista previa en tiempo real de cambios
2. PANEL DE CONFIGURACIÓN:
   - Configuración universal (elementos comunes)
   - Configuración específica por modo
   - Presets predefinidos (Compacto/Estándar/Detallado)
   - Guardar/cargar configuraciones personalizadas
3. ÁREA DE VISTA PREVIA:
   - Scroll vertical y horizontal
   - Redimensionado de columnas (modo Columnas)
   - Selección y navegación
   - Actualizaciones en tiempo real
4. CONTROLES DE EXPORTACIÓN:
   - Selector de tipo de exportación
   - Opciones adicionales (estadísticas, encabezados, etc.)
   - Vista previa del archivo TXT
   - Guardado con nombre personalizable
DATOS DE EJEMPLO:
```python
node_data = {
    "root": {"name": "Root", "type": "folder", "status": "✅", 
             "markdown_short": "# Proyecto principal"},
    "src": {"name": "src", "type": "folder", "status": "⬜", 
            "markdown_short": "# Código fuente"},
    "main": {"name": "main.py", "type": "file", "status": "✅", 
             "markdown_short": "# Punto de entrada principal"}
}
# Requerimientos Funcionales — Sistema de Vista Previa TreeApp v4 Pro
## CONTEXTO
- **Aplicación:** TreeApp v4 Pro (Python/Tkinter)
- **Propósito:** Organizador visual de proyectos en árbol
- **Ubicación:** Panel derecho = área de Vista Previa
- **Datos:** Estructura jerárquica (`node_data`), estados (✅❌⬜), markdown corto
## 1. MODOS DE VISTA PREVIA
### 1.1 Modo Clásico
- Indentación jerárquica (configurable: 1–8 espacios)
- Iconos opcionales (📁 = carpeta, 📄 = archivo)
- Estados centrados, separación horizontal configurable
- Markdown truncado con longitud máxima definida
- Configuración para mostrar/ocultar iconos, estados y markdown
### 1.2 Modo ASCII Completo
- Jerarquía con caracteres ASCII: ├──, └──, │ (personalizables)
- Líneas de conexión continuas y alineadas
- Separadores configurables entre elementos
- Opción de elegir Unicode o ASCII puro
- Configuración para mostrar/ocultar iconos, estados, markdown
### 1.3 Modo ASCII Solo Carpetas
- Solo muestra estructura de carpetas (archivos ocultos)
- Contador de archivos por carpeta
- Estadísticas de archivos ocultos al final del árbol
- Resumen por estados (ej: total archivos, completados, pendientes)
- Configuración para profundidad máxima y mostrar/ocultar iconos
### 1.4 Modo Columnas (Estilo Excel)
- Tres columnas: Ruta | Estado | Markdown
- Columnas redimensionables por drag & drop
- Doble click para autoajustar ancho al contenido
- Límites mínimo/máximo de ancho por columna
- Separadores verticales claros
- Scroll horizontal/vertical
- Colores alternados en filas (opcional)
- Configuración individual de columnas: mostrar/ocultar, orden, ancho, truncado
## 2. ELEMENTOS CONFIGURABLES UNIVERSALES
- Mostrar/ocultar estados (✅❌⬜)
- Longitud máxima de markdown (truncado con "…")
- Filtros por tipo (todos/solo archivos/solo carpetas/por estado)
- Ordenación por nombre, tipo, estado, fecha, o personalizada
## 3. SISTEMA DE EXPORTACIÓN TXT (POR MODO)
- Botón “Exportar como TXT” disponible en todos los modos
- **El TXT exportado debe coincidir exactamente** (espaciado, alineación, iconos, separadores, truncado) con la vista previa
- Incluye siempre:
  - Encabezado con nombre de proyecto, modo utilizado, fecha y hora de exportación
  - Documentación de configuración aplicada (elementos visibles, filtros, orden, etc.)
  - Estructura en el formato exacto del modo seleccionado
  - Estadísticas detalladas (total carpetas, archivos, estados, profundidad máxima)
  - Separadores visuales consistentes
- Opción para incluir/excluir encabezados, estadísticas y markdown extendido
## 4. INTERFAZ DE USUARIO
### 4.1 Selector de Modo
- Dropdown con los 4 modos
- Botón de configuración específico para cada modo
- Cambios reflejados en tiempo real en la vista previa
### 4.2 Panel de Configuración
- Configuración universal y específica por modo
- Presets predefinidos: Compacto, Estándar, Detallado
- Guardar y cargar configuraciones personalizadas (por usuario/proyecto)
### 4.3 Área de Vista Previa
- Scroll vertical y horizontal según contenido
- Redimensionado de columnas (en modo Columnas)
- Selección y navegación por árbol, filas, columnas
- Actualizaciones en tiempo real ante cualquier cambio de datos o configuración
### 4.4 Controles de Exportación
- Selector para tipo de exportación (proyecto, TXT, rama)
- Opciones adicionales: incluir estadísticas, encabezados, markdown extendido, código
- Vista previa del archivo TXT exportable
- Guardado con nombre personalizable
## 5. OPCIONES AVANZADAS
- Exportar solo una rama seleccionada (subárbol):  
  - Si no hay selección, mostrar aviso: “Selecciona una rama”.
- Incluir Notas Técnicas (campo markdown extendido — “Notas Técnicas”)  
  - Notas ordenadas por jerarquía e insertadas bajo cada encabezado de carpeta/archivo en el TXT
- Incluir código (campo de código del nodo)
- Texto final personalizado al final del TXT (por ejemplo, conclusiones, notas globales)
## 6. FORMATO PROFESIONAL DE TXT
- Encabezado por rama/archivo exportado:
  ```txt
  // ===========================================================================================
  // Nombre archivo/carpeta - Markdown
  //
  // Notas técnicas (si las hay)...
  // (código, si se incluyó)
  ```
- Separadores claros entre ramas/archivos
- Resumen/estadísticas al final
- Formato limpio, alineado, portable (LF/CRLF configurable)
## 7. SINCRONIZACIÓN Y RENDIMIENTO
- Vista previa debe renderizarse inmediatamente ante:
  - Carga inicial (incluyendo la raíz aunque esté vacía)
  - Cambios en el explorador de archivos, agregado/eliminado de nodos
  - Inclusión de markdowns, código o notas técnicas pegadas
  - Cambios de configuración y modo
- Exportación fiel y rápida, sin diferencias entre lo visto y lo guardado
## 8. EJEMPLO DE node_data
    "root": {"name": "Root", "type": "folder", "status": "✅", "markdown_short": "# Proyecto principal"},
    "src": {"name": "src", "type": "folder", "status": "⬜", "markdown_short": "# Código fuente"},
    "main": {"name": "main.py", "type": "file", "status": "✅", "markdown_short": "# Punto de entrada principal"}
**Estos requerimientos son obligatorios para el sistema de vista previa y exportación de TreeApp v4 Pro.**
# Árbol de Carpetas Sugerido para TreeApp v4 Pro — Vista Previa y Exportación
Este árbol contempla una arquitectura granular y extensible para el desarrollo del sistema de vista previa, modos, exportación y configuraciones.  
Incluye separación entre lógica de visualización, configuraciones, exportadores y recursos de interfaz.
# Árbol de Carpetas Sugerido — TreeApp v4 Pro (Versión Mejorada y Completa)
Este árbol integra todas las mejoras propuestas, contemplando panel de editor avanzado (los 4 campos), panel de árbol mejorado (explorador con drag & drop), integración con EventBus/StateManager, importación de árbol desde código y separación granular UI/lógica/configuración/exportación.



### Notas adicionales:
- Integración total entre paneles UI y lógica (EventBus, StateManager).
- Los 4 campos del editor (nombre, markdown, notas técnicas, código) con controles avanzados y validación, incluidos en modelos y UI.
- Explorador de árbol mejorado con drag & drop, importación desde código y operaciones avanzadas.
- Sistema de preview modular, renderers y configuraciones independientes.
- Exportación profesional, fiel a la vista previa, con opciones avanzadas.
- Facilita QA, mantenimiento y futuras extensiones.
**Este árbol es la base ideal para un TreeApp v4 Pro profesional, flexible y escalable.**


cuando los archivos superen las 450 lineas de codigo son una señal para remanufacturar dividiendo responsabilidades


✅ Botón "AppCreator" — Funcionalidad esperada
🎯 Objetivo:
Crear automáticamente:

Una carpeta de proyecto en el sistema de archivos (ubicación seleccionada).

Toda la estructura del árbol treeapp_v4_pro/ con archivos y carpetas reales.

Archivos que tengan  # markdown definido en TreeView que sean visibles al ejecutar tree /F /A.

🧱 Implementación sugerida:
📍 1. Botón visual "AppCreator"
Ubicado en la barra lateral del explorador.

Al hacer clic:

Abre un diálogo tkinter.filedialog.askdirectory() para elegir la carpeta destino.

Ejecuta AppStructureCreator.create_structure(path_destino)

